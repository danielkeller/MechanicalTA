{"name":"Mechanical TA","tagline":"","body":"![Logo](https://raw.github.com/danielkeller/MechanicalTA/gh-pages/images/mta.png)\r\n\r\nMechanical TA is an application that automatically grades programming assignments based on unit tests and grading criteria provided by the professor.\r\n\r\nThis eases the otherwise laborious process of evaluating the correctness of a student's code, and of fairly assigning partial credit.\r\n\r\nMechanical TA downloads each student's assignment submission from the assignment's dropbox, runs the tests written by the professor or TA on the code, and saves the grade from the tests.\r\n\r\n![Mechanical TA in action](https://raw.github.com/danielkeller/MechanicalTA/gh-pages/images/mta_screen.png \"Mechanical TA in action\")\r\n\r\n### Take it for a Spin\r\nEager to try it out? Download the app and the example test below. (Note that these require JDK 7 to run, available [here](http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html). If you're not sure what this is, you probably need to download it.)\r\n* [Download](https://bitbucket.org/danielkeller/mechanicalta/downloads/mta-1.0.jar)\r\n* [Download Example](https://bitbucket.org/danielkeller/mechanicalta/downloads/example.zip)\r\n\r\nTo run, log in as the example TA user (domain: `m-api.ecollege.com`, client: `gbtestc`, user: `mtata`, pass: `letmein`). Extract the `example.zip` file, and load that as the test. Choose the assignment \"Business Statistics For Mechanical TA\" > \"Assignment 4.1\". You will be able to run tests and see the results. If you upload the results, they will be visible in the gradebook for the class on LearningStudio (at http://intcampus.ecollege.com/).\r\n\r\n### Technical Details\r\nTo write tests, all you need is to extract the API jar from the program, and add it to the classpath in your favorite IDE. It contains jUnit, as well as the Mechanical TA API. Test classes are annotated with `@RunWith(AssignmentRunner.class)`. This is how Mechanical TA hooks into jUnit. Instead of `@Test`, tests are annotated with PointValue, ie `@PointValue(5)`, or `@PointValue(value=3, extraCredit=true)`. The final detail is the constructor. To allow the code being tested to change, the constructor must take an argument of interface type.\r\n\r\nMechanical TA uses an unmodified version of jUnit, and so is compatible with existing jUnit runners, including the ones build into IDEs. This makes it very easy to develop your test against a model implementation. Simply annotate your constructor like so:\r\n\r\n\t@ModelImpl(ExampleModel.class)\r\n\tpublic ExampleTest(ExampleInterface studentClass) {\r\n\t\ttest = studentClass;\r\n\t}\r\n\r\nThe MechanicalTA app itself will ignore that annotation when testing student code.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}